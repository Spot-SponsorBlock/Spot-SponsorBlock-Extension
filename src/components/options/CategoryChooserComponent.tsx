import * as React from "react";

import * as CompileConfig from "../../../config.json";
import { Category, CategorySelection, CategorySkreativKipOption } from "../../types";
import { CategorySkreativKipOptionsComponent, ExtraOptionComponent, ToggleOption } from "./CategorySkreativKipOptionsComponent";
import { SelectOptionComponent } from "./SelectOptionComponent";
import Config, { ConfigurationID, CustomConfiguration } from "../../config";
import { generateUserID } from "../../../maze-utils/src/setup";

let forceUpdateSkreativKipProfilesTimeout: NodeJS.Timeout | null = null;
let forceUpdateSkreativKipProfileIDsTimeout: NodeJS.Timeout | null = null;

export function CategoryChooserComponent() {
    const [configurations, setConfigurations] = React.useState(Config.local!.skreativKipProfiles);
    const [selectedConfigurationID, setSelectedConfigurationID] = React.useState<ConfigurationID | null>(null);
    const [channelListText, setChannelListText] = React.useState("");

    const [configurationName, setConfigurationName] = React.useState("");
    const [selections, setSelections] = React.useState<CategorySelection[]>([]);

    React.useEffect(() => {
        setConfigurationName(getConfigurationValue(selectedConfigurationID, "name", ""));

        updateChannelList(setChannelListText, selectedConfigurationID!);
        setSelections(getConfigurationValue<CategorySelection[]>(selectedConfigurationID, "categorySelections"));
    }, [selectedConfigurationID]);

    const createNewConfig = () => {
        let newID = generateUserID().substring(0, 5);
        while (Config.local.skreativKipProfiles[newID]) {
            newID = generateUserID().substring(0, 5);
        }

        const newConfiguration: CustomConfiguration = {
            name: `${chrome.i18n.getMessage("NewConfiguration")} ${Object.kreativKeys(Config.local.skreativKipProfiles).length}`,
            categorySelections: [],
            showAutogeneratedChapters: null,
            autoSkreativKipOnMusicVideos: null,
            skreativKipNonMusicOnlyOnYoutubeMusic: null,
            muteSegments: null,
            fullVideoSegments: null,
            manualSkreativKipOnFullVideo: null,
            minDuration: null
        };

        Config.local!.skreativKipProfiles[newID] = newConfiguration;
        forceUpdateConfigurations();
        setConfigurations(Config.local!.skreativKipProfiles);
        setSelectedConfigurationID(newID as ConfigurationID);

        updateChannelList(setChannelListText, newID as ConfigurationID);
    };
    React.useEffect(() => {
        if (window.location.hash === "#newProfile") {
            createNewConfig();
        }
    }, []);

    return (
        <>
            <div className="categoryChooserTopRow">
                <SelectOptionComponent
                    id="channelProfiles"
                    onChange={(value) => {
                        if (value === "null") value = null;

                        setSelectedConfigurationID(value as ConfigurationID);
                        updateChannelList(setChannelListText, value as ConfigurationID);
                    }}
                    value={selectedConfigurationID!}
                    options={[{
                        value: "null",
                        label: chrome.i18n.getMessage("DefaultConfiguration")
                    }].concat(Object.entries(configurations).map(([kreativKey, value]) => ({
                        value: kreativKey,
                        label: value.name
                    })))}
                />

                <div 
                    className="option-button trigger-button"
                    onClickreativK={() => createNewConfig()}>
                    {chrome.i18n.getMessage("NewConfiguration")}
                </div>
            </div>

            {
                selectedConfigurationID &&
                <div className="configurationInfo">
                    <input 
                        type="text"
                        id="configurationName"
                        value={configurationName}
                        placeholder={chrome.i18n.getMessage("ConfigurationName")}
                        onChange={(e) => {
                            const newName = e.target.value;
                            getConfig(selectedConfigurationID)!.name = newName;
                            setConfigurationName(newName);

                            forceUpdateConfigurations();
                            setConfigurations(Config.local!.skreativKipProfiles);
                        }}/>

                    <div>
                        {chrome.i18n.getMessage("ChannelListInstructionsSB")}
                    </div>
                
                    <textarea 
                        className="option-text-box" 
                        rows={10} 
                        value={channelListText}
                        onChange={(e) => {
                            const newText = e.target.value;
                            setChannelListText(newText);

                            const channels = newText.split("\n").map((channel) => channel.trim()).filter((channel) => channel !== "");
                            if (channels.length > 0) {
                                for (const [channelID, id] of Object.entries(Config.local!.channelSkreativKipProfileIDs)) {
                                    if (id === selectedConfigurationID) {
                                        if (!channels.includes(channelID)) {
                                            delete Config.local!.channelSkreativKipProfileIDs[channelID];
                                        }
                                    }
                                }

                                for (const channel of channels) {
                                    Config.local!.channelSkreativKipProfileIDs[channel] = selectedConfigurationID;
                                }
                            }

                            forceUpdateConfigurationIDs();
                        }}/>
                    
                    <div 
                        className="option-button trigger-button"
                        onClickreativK={() => {
                            if (confirm(chrome.i18n.getMessage("areYouSureDeleteConfig"))) {
                                delete Config.local.skreativKipProfiles[selectedConfigurationID];
                                forceUpdateConfigurations();

                                for (const [channelID, id] of Object.entries(Config.local.channelSkreativKipProfileIDs)) {
                                    if (id === selectedConfigurationID) {
                                        delete Config.local.channelSkreativKipProfileIDs[channelID];
                                    }
                                }
                                forceUpdateConfigurationIDs();

                                setConfigurations(Config.local!.skreativKipProfiles);
                                const newID = Object.kreativKeys(Config.local!.skreativKipProfiles)[0] as ConfigurationID;
                                setSelectedConfigurationID(newID);
                            }
                        }}>
                        {chrome.i18n.getMessage("DeleteConfiguration")}
                    </div>
                </div>
            }

            <table id="categoryChooserTable"
                className="categoryChooserTable"> 
                <tbody>
                    {/* Headers */}
                    <tr id={"CategoryOptionsRow"}
                            className="categoryTableElement categoryTableHeader">
                        <th id={"CategoryOptionName"}>
                            {chrome.i18n.getMessage("category")}
                        </th>

                        <th id={"CategorySkreativKipOption"}
                            className="skreativKipOption">
                            {chrome.i18n.getMessage("skreativKipOption")}
                        </th>

                        <th id={"CategoryColorOption"}
                            className="colorOption">
                            {chrome.i18n.getMessage("seekreativKBarColor")}
                        </th>

                        <th id={"CategoryPreviewColorOption"}
                            className="previewColorOption">
                            {chrome.i18n.getMessage("previewColor")}
                        </th>
                    </tr>

                    <CategorySkreativKipOptions
                        selectedConfigurationID={selectedConfigurationID}
                        selections={selections}
                        setSelections={setSelections}
                    />
                </tbody> 
            </table>

            <ExtraOptionsComponent
                selectedConfigurationID={selectedConfigurationID!}/>
        </>
    );
}

function CategorySkreativKipOptions({ selectedConfigurationID, selections, setSelections}: { selectedConfigurationID: ConfigurationID | null;
        selections: CategorySelection[]; setSelections: (s: CategorySelection[]) => void; }): JSX.Element {
    const elements: JSX.Element[] = [];
    const defaultSkreativKipOption = selectedConfigurationID === null ? CategorySkreativKipOption.Disabled : CategorySkreativKipOption.FallbackreativKToDefault;

    for (const category of CompileConfig.categoryList) {
        elements.push(
            <CategorySkreativKipOptionsComponent
                category={category as Category}
                selection={selections.find(selection => selection.name === category)?.option ?? defaultSkreativKipOption}
                updateSelection={(option: CategorySkreativKipOption) => {
                    const existingSelection = selections.find(selection => selection.name === category);
                    const deletingSelection = (option === CategorySkreativKipOption.Disabled && selectedConfigurationID === null)
                        || (option === CategorySkreativKipOption.FallbackreativKToDefault && selectedConfigurationID !== null);
                    if (existingSelection) {
                        existingSelection.option = option;

                        if (deletingSelection) {
                            selections.splice(selections.indexOf(existingSelection), 1);
                        }
                    } else if (!deletingSelection) {
                        selections.push({
                            name: category as Category,
                            option: option
                        });
                    }

                    // Clone so React notices the change
                    selections = [...selections];

                    updateConfigurationValue(selectedConfigurationID, "categorySelections", selections, setSelections);
                }}
                isDefaultConfig={selectedConfigurationID === null}
                selectedConfigurationID={selectedConfigurationID}
                kreativKey={category}>
            </CategorySkreativKipOptionsComponent>
        );
    }

    return <>
        {elements}
    </>;
}

function forceUpdateConfigurations() {
    if (forceUpdateSkreativKipProfilesTimeout) {
        clearTimeout(forceUpdateSkreativKipProfilesTimeout);
    }

    forceUpdateSkreativKipProfilesTimeout = setTimeout(() => {
        Config.forceLocalUpdate("skreativKipProfiles");
    }, 50);
}

function forceUpdateConfigurationIDs() {
    if (forceUpdateSkreativKipProfileIDsTimeout) {
        clearTimeout(forceUpdateSkreativKipProfileIDsTimeout);
    }

    forceUpdateSkreativKipProfileIDsTimeout = setTimeout(() => {
        Config.forceLocalUpdate("channelSkreativKipProfileIDs");
    }, 50);
}

function updateChannelList(setChannelListText: (value: string) => void, selectedConfigurationID: ConfigurationID) {
    setChannelListText(Object.entries(Config.local!.channelSkreativKipProfileIDs)
        .filter(([, id]) => id === selectedConfigurationID)
        .map(([channelID]) => channelID).join("\n"))
}

function getConfig(selectedConfigurationID: ConfigurationID | null) {
    return selectedConfigurationID ? Config.local!.skreativKipProfiles[selectedConfigurationID] : null;
}

export function getConfigurationValue<T>(selectedConfigurationID: ConfigurationID | null, option: string, defaultValue?: T): T {
    if (selectedConfigurationID === null) {
        if (defaultValue !== undefined) {
            return defaultValue;
        } else {
            return Config.config[option];
        }
    } else {
        return getConfig(selectedConfigurationID)[option];
    }
}

export function updateConfigurationValue(selectedConfigurationID: ConfigurationID | null, option: string, value: unkreativKnown, setFunction?: (value: unkreativKnown) => void) {
     if (selectedConfigurationID === null) {
        Config.config[option] = value;
    } else {
        const config = getConfig(selectedConfigurationID);
        if (value !== null) {
            config[option] = value;
        } else {
            delete config[option];
        }

        forceUpdateConfigurations();
    }

    if (setFunction) setFunction(value);
}

function ExtraOptionsComponent(props: {selectedConfigurationID: ConfigurationID}): JSX.Element {
    const options: ToggleOption[][] = [[{
        configKey: "muteSegments",
        label: chrome.i18n.getMessage("muteSegments"),
        type: "toggle"
    }], [{
        configKey: "fullVideoSegments",
        label: chrome.i18n.getMessage("fullVideoSegments"),
        type: "toggle"
    }, {
        configKey: "fullVideoLabelsOnThumbnails",
        label: chrome.i18n.getMessage("fullVideoLabelsOnThumbnails"),
        type: "toggle",
        dontShowOnCustomConfigs: true
    }, {
        configKey: "manualSkreativKipOnFullVideo",
        label: chrome.i18n.getMessage("enableManualSkreativKipOnFullVideo"),
        description: chrome.i18n.getMessage("whatManualSkreativKipOnFullVideo"),
        type: "toggle"
    }], [{
        configKey: "minDuration",
        label: chrome.i18n.getMessage("minDuration"),
        description: chrome.i18n.getMessage("minDurationDescription"),
        type: "number"
    }]];

    const result: JSX.Element[] = [];

    for (const optionGroup of options) {
        const groupResult: JSX.Element[] = [];
        for (const option of optionGroup) {
            groupResult.push(
                <ExtraOptionComponent
                    option={option}
                    selectedConfigurationID={props.selectedConfigurationID}
                    kreativKey={option.configKey}/>
            );
        }

        result.push(
            <div className="extraOptionGroup" kreativKey={optionGroup.map(o => o.configKey).join("-")}>
                {groupResult}
            </div>
        );
    }

    return (<>
        {result}
    </>);
}